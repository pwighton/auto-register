#+TITLE: Techinical Description of the AutoRegister Components
#+AUTHOR: Oliver Hinds <ohinds@orchardscientific.org>
#+DATE:
#+OPTIONS: H:3 num:3 toc:3 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [article,letterpaper,times,12pt,listings-bw,microtype]
#+LaTeX_HEADER: \usepackage[margin=0.5in]{geometry}
#+LaTeX_HEADER: \usepackage{helvet}
#+LaTeX_HEADER: \usepackage[hyperref, svgnames, table]{xcolor}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \usepackage[absolute]{textpos}
#+LaTeX_HEADER: \definecolor{titlecolor}{rgb}{0.09,0.21,0.09}
#+LaTeX_HEADER: \definecolor{seccolor}{rgb}{0.09,0.37,0.09}
#+LaTeX_HEADER: \definecolor{subseccolor}{rgb}{0.09,0.51,0.09}
#+LaTex_HEADER: \renewcommand{\familydefault}{\sfdefault}
#+LaTex_HEADER: \usepackage{titlesec}
#+LaTex_HEADER: \titleformat{\section}
#+LaTex_HEADER: {\color{seccolor}\normalfont\Large\bfseries}
#+LaTex_HEADER: {\color{seccolor}\thesection}{1em}{}
#+LaTex_HEADER: \titleformat{\subsection}
#+LaTex_HEADER: {\color{subseccolor}\normalfont\large\bfseries}
#+LaTex_HEADER: {\color{subseccolor}\thesubsection}{1em}{}
#+LaTeX_HEADER: \usepackage{paralist}
#+LaTeX_HEADER: \let\itemize\compactitem
#+LaTex_HEADER: \hypersetup{%
#+LaTex_HEADER:     pdfborder = {0 0 0}
#+LaTex_HEADER: }
#+LaTex: \setlength{\parskip}{1em}
#+LaTex: \setlength{\parindent}{0pt}
#+LaTex: \thispagestyle{empty}

* Overview

This document explains the techinical details of the components
produced for Phase One of the AutoRegister grant. The accompanying
document =workflow.md= describes the installation and operation of the
AutoRegister system.

* Scout MRI pulse sequence

The AutoRegister Scout MRI pulse sequence is needed to acquire an
image of a patient's head, which is appropriate for computing a
spatial transformation between a previous or subsequent image of the
same patient.

** Repository

TODO

** Details

The AutoRegister scout pulse sequence is based directly off of the
gradient echo pulse sequence distributed by Siemens under the name
=a_gre=. The scout has been successfully tested on Siemens baselines
VB17A_???????? and VD13C_20121124. A scout for baseline
VE11B_20150530 is under development.

For each platform version, the only change that needs to be made from
the Siemens default pulse sequence is to change the ICE program
filename to point to the AutoRegister MR Image reconstruction
module. Specifically, clone the a_gre pulse sequence code to a new
sequence =AutoRegisterScout= and change the line in a_gre.cpp:
=rSeqExpo.setICEProgramFilename(...)= to point to the AutoRegister ICE
Program, e.g.
=%CustomerIceProgs%\\ohinds\\IceProgramAutoRegisterInterface=

** Protocol

Early in the AutoRegister project, a series of test scans was
conducted to determine a set of protocol parameters appropriate to act
as a scout.

TODO describe the experiment and results

TODO list the protocol parameters

* Registration module

The registration module is python software that runs on a computer
external to the MRI system: currently a laptop in the scanner control
room. The software receives an image from the MR Image reconstruction
module, computes a spatial transformation, and sends the
transformation back to the Image reconstruction module.

** Repository

TODO

** Environment

*** Python

To avoid version and package conflicts, the python software runs in a
dedicated virtual environment produced by the =virtualenv=
software. The workflow.md file describes the process of setting up the
virtual environment, which is very simple.

The python libraries on which the Registration module depends are
listed below.
- =numpy= for matrix math
- =nibabel= for reading and writing NIFTI images
- =nosetest= for running tests

*** =mri_robust_register=

Co-registration of scout images is accomplished using the tool
=mri_robust_register= from the FreeSurfer software
package. Instructions for installing FreeSurfer and configuring a
shell environment suitable for running =mri_robust_register= are
available at http://freesurfer.net/.

** File formats

*** NIFTI

The NIFTI file format is widely used to store MR images, and
=mri_robust_register= inherits NIFTI compatibility from
FreeSurfer. The Registration module uses the =nibabel= python package
to write out NIFTI files when MR images are received from the Image
reconstruction module.

*** LTA

The LTA file format stores a linear transformation in text
format. This is the format in which =mri_robust_register= stores
computed transformations. The Registration module contains custom code
to load a transformation from an LTA file.

** Source

The source code for the Registration module is written in
Python. It has been tested with Python version 2.7.

*** High-level description

The main file, =auto_register.py=, controls operation of the
AutoRegister Registration module. It is executed from the command line
while in the python environment described above. It's main duty is to
configure an instance of the =AutoRegister= class and to execute it's
main loop.

In the main loop of the =AutoRegister= class, four operations are
carried out. First, a class member instance of =ImageReceiver= is
queried to check if new images are available from the MRI scanner or
simulator. Second, if a new image is available, it is either saved as
the reference image for registration with subsequent images, or it is
taken as subsequent image that is registered with the reference image
using a newly created instance of the =RegisteredImage= class. Third,
once the registration is completed, a class member instance of
=TransformSender= is notified that a new transformation is ready. This
transformation is sent when a request is made for it from an external
client. Fourth, a member instance of =TerminalInput= is queried to
determine if a new character has been entered by the user. If so, and
if this character is 'q', the main loop exits.

The sections below give a high-level description of each source file
and list the output of the =pydoc= Python source code documentation
generation tool.

*** =auto_register.py=

The top-level file in the Registration module. It contains the
=__main__= entry point, and thus is the file that is executed to run
the entire Registration module.

#+INCLUDE: pydoc/auto_register.py.txt example

*** =external_image.py=

The data structure to hold an image received from an external
source. Adapted from code originally developed by Satra Ghosh for the
MURFI project.

#+INCLUDE: pydoc/external_image.py.txt example

*** =image_receiver.py=

The helper module that runs a TCP/IP server to listen for incoming
images from an external computer. When it receives an image, it is
saved and the filename stored so other modules can request it.
Adapted from code originally developed by Satra Ghosh for the MURFI
project.

#+INCLUDE: pydoc/image_receiver.py.txt example

*** =registered_image.py=

The helper module that calls out to the external registration program
(=mri_robust_register=) and parses the resulting transformation
file. It makes both the filename and an affine matrix representation
available to other modules.

#+INCLUDE: pydoc/registered_image.py.txt example

*** =tcpip_server.py=

A simple, generic TCP/IP server. This is used by both ImageReceiver
and TransformSender to send and receive data from the MRI scanner or
simulator. Adapted from code originally developed by Satra Ghosh for
the MURFI project.

#+INCLUDE: pydoc/tcpip_server.py.txt example

*** =terminal_input.py=

The helper module that allows sane user input. At the moment, this
module is only used to listen for a shutdown signal.

#+INCLUDE: pydoc/terminal_input.py.txt example

*** =transform_sender.py=

The helper module that sends transformation data to the MRI scanner or
simulator. It runs a TCP/IP server that listens for "ping" requests
from the external client, and sends a transformation on receiving a
ping only if there are any transformations in the send queue.

#+INCLUDE: pydoc/transform_sender.py.txt example

** Tools

*** =vsend_nii=

The C++ tool =vsend_nii= simulates the image sending functionality of
the MR Image reconstruction module. This was used in development and
testing of the AutoRegister Registration module, and can be used to
reproduce the results of executing =auto_register.py= while not at an
MRI scanner.

=vsend_nii= depends on the libraries ACE
(http://www.cs.wustl.edu/~schmidt/ACE.html) and niftilib
(http://niftilib.sourceforge.net/). Both of these packages are
available in the Ubuntu repositories.

To build the =vsend_nii= executable, change to the directory
=tools/scanner_sim= and execute =make=. To execute it, run the binary
from the command line, passing the path to a NIFTI image file as an
argument.

** Tests

TODO

* MR image Reconstruction module

** Repository

TODO

** Details
